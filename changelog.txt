2002-04-13
----------
beta3 released, win32 (exomizer.exe) and Linux (exomizer.lnx) binaries.
win32 exe built using visual studio 6.0. The linux binary was built on
A redhat 7.2 system. It uses no fancy system stuff so it should be runnable
on any glibc2 based linux system. However, this has not been tested.

+ sourcecode and a Linux Makefile in the exomizer-src-1.0beta3.zip file.
  To build on Linux just type make.
  To build in visual studio, just create a console app project and add
  all the *.c and *.h files. The exomizer uses a lot of stackspace so
  in order to run properly on win32 the stack size has to be increased.
  The visual studio linker option /stack:0x800000 sets the stacksize to be
  the same size that Linux defaults to. 
+ new feature, a -q option for quiet mode. The exomizer only outputs one line
  on stdout if it is invoked with this flag.
+ A bug has been fixed, if exomizer was run without any of the -l, -r or -s
  flags to produce a memory decrunchable file without a start address, parts of
  the decruncher was added to the output file.
+ changed the decruncher to use less harmful zeropage adresses.
+ changed the decruncher source: moved the small static tables into the de-
  cruncher and out of the relocatable tables area. This allows the application
  to safely reuse/overwrite that memory area between decrunches.
+ updated exomizer-1.0.txt with info about adresses clobbered by the decruncher
  and howto enter hexadecimal option arguments.
+ the license printed by -u has been updated to reflect the same license as
  the source code is released under.

2002-03-17
----------
win32 only beta2 released.
There is no changes in compression rates since beta1.
The binary itself is now compressed with upx-1.20.

This beta release includes some changes to the licensing. Now, the software may
only be used for non-commercial purposes. However, the files it generates and
the decruncher sourcecode may be used for commercial purposes. This may sound
conflicting but I want to avoid the situation where the binary itself or it's
sourcecode is used and/or distributed as a part of a commercial application.

2002-03-11
----------
internal release.
To use the decrunch routine in your own projects you have to implement your
own get_byte routine. This routine reads the next byte from the compressed
data stream. This stream may be stored on disc or in memory - It's up to you.
The decruncher doesn't care. All it needs to know is what routine to jsr to
get the next byte.

All implementations of the get_byte routine have to preserve the values of the
x and y registers and the carry flag state. The decruncher depends on those
being unchanged.

When the decruncher is done it will rts nicely to the caller. This means that
you can make a stream consisting of more than one compressed data file and jsr
the decruncher the corresponding number of times, without the need to
reinitialize the stream in between.


2002-03-08
----------
internal release.
This beta release features an updated exodecrunch.s. This version is tested and
works.

This release also introduces copyright notices and a usage license,
updated texts in the binary and an updated exomiser_beta.txt file.


2002-03-06
----------
beta1 released.
The program should be quite self explanatory, just run it with the -? option.
The exodecrunch.s is a asm sourcefile that assembles with the ca65 assembler
included in the cc65 compiler package. The decruncher sourcefile is based on
the one used in the sfx-routines but with an easily exchangeable get_byte
routine. It may contain silly bugs, but they should be easy to spot.

/Regards

Magnus Lind
magli143@teila.com
