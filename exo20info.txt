Exomizer 2.0 beta2 released (no source code and no docs yet).

NEW FEATURES:

o  New target independant binary, exoraw, that features:
   1) Crunches plain files instead of .prg files.
   2) Crunches forward or backwards instead of just backwards.
   3) Also decrunches.
   4) Handles files larget than 64k. Sizes below 1MB is now possible to crunch.
      It handles the complete canterbury and calgary corpora just fine.
   5) Comes with two different C-source decrunchers, one thread safe forward
      pull decruncher and one low-level backward push decruncher perfect to
      base an assembler port on.

o  Totally rewitten handling of the sfx decruncher:
   1) Several different decrunch effects.
   2) Complete user control over memory and irq config.
   3) Can start basic programs properly with built in trampoline by using the
      command 'sfx basic'
   3) The decruncher code is assembled on the fly for maximum flexibility by an
      embedded assembler.
   4) Will adapt the decruncher to include only features used by the compressed
      stream to keep the size down.
   5) Now also supports the c128 and the vic20 (in several configurations).
   6) The Atari 400/800 XL/XE family is supported as a sfx target: 168.
      The file written by this targer is of the type xex.
      Example: $ exomizer sfx sys boinxx.obx -o x.xex
   7) Also handles relocated sfx without basic line.

o   Exomizer now reads xex-files and autodetects the RUNAD vector if the sys
    keyword is given to the sfx command.

o  Exomizer now can load plain files using the <filename>@<addr> syntax.

o  The cruncher now has an escape mechanism that detects and handles sequences
   of uncrunchable data, literal sequences, properly.

o  The level mode of exomizer now crunches each infile separately and appends
   them to the outfile instead of merging them together like the -r mode did
   before. The new behaviour is more useful for level usage.

FEATURES STILL TO DO BEFORE PROPER RELEASE:

o  Sfx decruncher in exomizer:
   1) Handle the vic20 target better with regards to memory holes.

o  There is no 6502 assembler decruncher for streaming data crunched forward or
   crunched using literal sequences.
   However the streaming (backwards) decrunchers will work if the -b and -c
   flags are used when crunching (with exoraw). Please see the examples.
   Please note that unlike 1.x, only exoraw can crunch data intended to be used
   by the streaming decrunchers.

o  The sfx command sometimes crunch better with the -c flag.

o Update the usage descriptions properly.

The exomizer binary now uses a slightly different command syntax:
old:                                    new:
------------------                      -----------------------------
exomizer -ssys <infile>                 exomizer sfx sys <infile>
exomizer -s$1234 <infile>               exomizer sfx $1234 <infile>
exomizer -r <infile>                    exomizer level <infile>
exomizer <infile>                       exomizer mem -lnone <infile>
exomizer -l$1234 <infile>               exomizer mem -l$1234 <infile>
exomizer -lauto  <infile>               exomizer mem <infile>

The sfx decruncher is tweaked by defining optional symbols to the assembler on
the command line using the -D<symbol>=<value> flag:

The following symbol controls the sfx load address:
 i_load_addr

If it is unset then the sfx file will load to the default basic start address
of the target machine (For Atari the default load address is $2c00)
If it is set then the sfx file will load to the given address and it will not
have any basic sys line. (The Atari target never has a basic line).

The following symbols control the memory config:
 i_ram_enter      (defaults to standard ROM config)
 i_ram_during
 i_ram_exit       (defaults to standard ROM config)

For the c64 and the c128 target the value n will be stored into $fff0 (c128) or
$01 (c64) to set the mem config. For the c16/+4 target 0=ROM and 1=RAM.
default is $37 for the c64, $00 for the c128 and 0 for the c16/+4.

The following symbols control irqs. (0=disabled,sei, 1=enabled,cli)
 i_irq_enter      (defaults to 1)
 i_irq_during
 i_irq_exit

To locate the decrunch table elsewhere than the default tape buffer:
 -Di_table_addr=<address>

To select one of the four decruncher effects add this flag (0 <= n <= 3):
 -Di_effect=n

To have the effect updated faster add this flag:
 -Di_fast_effect=1

The possible effects to chose from are:
-1: no effect at all.
0: traditional lower right screen corner flashing (default).
1: border flash based on the value of the accumulator (needs fast effects).
2: border flash based on the value of the x-register.
3: border flash based on the value of the y-register.
